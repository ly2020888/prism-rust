use crate::crypto::hash::{Hashable, H256};
//use crate::experiment::performance_counter::PayloadSize;
use bincode::serialize;
use std::time::SystemTime;
/// An address of a user. It is the SHA256 hash of the user's public key.
pub type Address = H256;

/// 现在重构为账户模型
#[derive(Serialize, Deserialize, Debug)]
pub struct Account {
    pub address: Address,
    pub balance: u64,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq)]
pub struct Transaction {
    pub hash: Option<H256>,

    /// The list of inputs put into this transaction.
    pub input_account: Address,
    /// The list of outputs generated by this transaction.
    pub output_acccount: Address,

    pub value: u64,

    /// Authorization of this transaction by the owners of the inputs.
    pub authorization: Option<Authorization>,

    /// 交易发生时的时间戳
    pub time_stamp: SystemTime,
}

// impl PayloadSize for Transaction {
//     /// Return the size in bytes
//     fn size(&self) -> usize {
//         std::mem::size_of::<Address>()
//             + std::mem::size_of::<Address>()
//             + std::mem::size_of::<Authorization>()
//             + std::mem::size_of::<H256>()
//     }
// }

impl Hashable for Transaction {
    fn hash(&self) -> H256 {
        let hash = self.hash;
        if let Some(h) = hash {
            return h;
        }
        drop(hash);

        let hash: H256 =
            ring::digest::digest(&ring::digest::SHA256, &serialize(self).unwrap()).into();
        hash
    }
}

/// Authorization of the transaction by the owner of an input coin.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq)]
pub struct Authorization {
    /// The public key of the owner.
    pub pubkey: Vec<u8>,
    /// The signature of the transaction input and output
    pub signature: Vec<u8>,
}

#[cfg(any(test))]
pub mod tests {}
